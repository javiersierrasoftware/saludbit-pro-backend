// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Institution {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  users User[]
  groups Group[]
  surveys Survey[]
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  password       String
  name           String
  identification String?
  phone          String?
  role           Role      @default(STUDENT)
  status         Status    @default(ACTIVE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?      @db.ObjectId

  surveyAssignments SurveyAssignment[]
  answers           UserAnswer[]
  groups            UsersOnGroups[]
  createdGroups     Group[]            @relation("CreatedGroups")
}

model Survey {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  assignments   SurveyAssignment[]
  questions     Question[]

  institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?      @db.ObjectId
}

model SurveyAssignment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  status    AssignmentStatus @default(PENDING)
  dueDate   DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String @db.ObjectId

  @@unique([userId, surveyId])
}

model Question {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  type      QuestionType
  options   String[] // Para preguntas de opción múltiple
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String @db.ObjectId
  answers  UserAnswer[]
}

// /impactou-backend/prisma/schema.prisma

model UserAnswer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  userId     String   @db.ObjectId
  value      String?  // Para respuestas de texto
  options    String[] // Para respuestas de selección

  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Se elimina la restricción para permitir múltiples respuestas.
}

model Group {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  invitationCode  String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  creator         User            @relation("CreatedGroups", fields: [creatorId], references: [id])
  creatorId       String          @db.ObjectId
  institution     Institution?    @relation(fields: [institutionId], references: [id])
  institutionId   String?         @db.ObjectId
  members         UsersOnGroups[]
}

model UsersOnGroups {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String   @db.ObjectId
  assignedAt DateTime @default(now())
  @@unique([userId, groupId])
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  SUPERVISOR
  INSTITUTION_ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AssignmentStatus {
  PENDING
  COMPLETED
}

enum QuestionType {
  TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
